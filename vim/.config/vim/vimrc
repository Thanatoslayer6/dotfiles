" V i m  C o n f i g
" Conventional stuff make sure gvim is installed
syntax on
set nocompatible 
filetype plugin on
filetype indent on
set incsearch
set hlsearch
set wildmenu
set number
set relativenumber
set mouse=a
set encoding=UTF-8
set clipboard=unnamedplus
set nowrap
set autochdir
set hidden
set splitright
set splitbelow
set formatoptions-=ro
set exrc
set secure
set path +=../include,include

" Change the default ~/.vim and ~/.viminfo location
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

" No backups or swap stuff
set nobackup
set nowb
set noswapfile

" Use spaces instead of tabs, smart tabs, tab = 4'\s'
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4 

" " P R E F E R E N C E S
" Alacritty and vim integration, need to install 'alacritty-colorscheme'
" the base16-vim colors are inside colors dir, no need to install plugin
if filereadable(expand("~/.vimrc_background"))
      source ~/.vimrc_background
endif

" Transparency
hi Normal guibg=NONE ctermbg=NONE

"" Manual Colorscheme fix for solarized8
"let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"set t_Co=256
"set termguicolors
"colorscheme solarized8

" Manual PaperColor Colorscheme
"set t_Co=256
"set background=dark
"colorscheme PaperColor

"Automatic day and night colorscheme, use this for manual
":let &background = strftime("%H") < 17 ? "light" : "dark"

" Change cursor styles
let &t_SI = "\e[5 q"
let &t_EI = "\e[2 q"

" Remap jk for fast escape, although Ctrl+c is faster?
inoremap jk <Esc>
nnoremap <S-l> :tabn <cr>
nnoremap <S-h> :tabp <cr>
nnoremap <S-d> :tabclose <cr>

" Better window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j 
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k

" Faster copy
nnoremap Y y$

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Bind redo to `r`
nnoremap r :redo<cr>

" Moving text, uses shift key
nnoremap K :m .-2<CR>==
nnoremap J :m .+1<CR>==
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv

" Built-in Terminal, vim 8.1 and above supported
au BufEnter * if &buftype == 'terminal' | :startinsert | endif
nnoremap <silent>tt :term ++rows=10<cr>
tnoremap <silent>tt <c-\><c-n>:q!<cr>

" PLUG-INS
call plug#begin('~/.config/vim/plugged')
  " Enhancements
    Plug 'tpope/vim-commentary'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'preservim/nerdtree'
    Plug 'sbdchd/neoformat'
    Plug 'sbdchd/indentline.vim'
    Plug 'jiangmiao/auto-pairs'
    Plug 'skywind3000/asynctasks.vim'
    Plug 'skywind3000/asyncrun.vim' 
  " Appearance
    Plug 'itchyny/lightline.vim'
    Plug 'ryanoasis/vim-devicons'
  " Syntax
    Plug 'ap/vim-css-color'
  " LSP
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings'
  " Completion
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
  " Snippets
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
  " Programming (C/C++)
    Plug 'cdelledonne/vim-cmake'
call plug#end()

" ultisnips [forward: Ctrl+l, backward: Ctrl+k, expand snippet: enter]
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsExpandTrigger = "<nop>"
inoremap <expr> <CR> pumvisible() ? "<C-R>=UltiSnips#ExpandSnippetOrJump()<CR>" : "\<CR>"
call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
    \ 'name': 'ultisnips',
    \ 'allowlist': ['*'],
    \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
    \ }))

" fzf
" Find root directory and execute :Files
function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
let g:fzf_action = { 'enter': 'tab split' }

command! ProjectFiles execute 'Files' s:find_git_root()

nnoremap <C-p> :ProjectFiles <cr>

" nerdtree
let g:webdevicons_enable_nerdtree = 1
let g:NERDTreeQuitOnOpen=1
nnoremap <C-f> :NERDTreeToggle <cr>

" Always open files in new tabs, remap 'enter' to 'l'
let g:NERDTreeCustomOpenArgs={'file':{'where': 't'}}
let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      'l')

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" lightline.vim
set laststatus=2
let g:lightline = {
      \ 'colorscheme': '16color',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \   'filetype': 'MyFiletype',
      \   'fileformat': 'MyFileformat'
      \ },
      \ }

function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction
  
function! MyFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction

" neoformat
nnoremap <F2> :Neoformat prettier <cr>

" asyncomplete.vim
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" vim-cmake
let g:cmake_link_compile_commands = 1
nnoremap <F9> :CMakeBuild <cr>
nnoremap <F10> :CMakeGenerate <cr>
nnoremap <F11> :CMakeClean <cr>

" Asynctasks.vim and Asyncrun.vim (install xterm)
let g:asynctasks_term_pos = 'external'
let g:asyncrun_rootmarks = ['.svn', '.git', '.root', '.bzr', '_darcs', 'build.xml', 'CMakeLists.txt', 'Makefile'] 
nnoremap <F12> :AsyncTask project-run <cr>


