" == VIM CONFIGURATION ==
" Conventional stuff make sure gvim is installed
syntax on
filetype plugin on
filetype indent on
set nocompatible 
set incsearch
set hlsearch
set wildmenu
set number
set relativenumber
set mouse=a
set encoding=UTF-8
set clipboard=unnamedplus
set nowrap
set autochdir
set hidden
set splitright
set splitbelow
set formatoptions-=ro
set exrc
set secure
set path +=../include,include

" Leader key is set to SPACE
let mapleader = " "

" Change the default ~/.vim and ~/.viminfo location
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

" No backups or swap stuff
set nobackup
set nowb
set noswapfile

" Use spaces instead of tabs, smart tabs, tab = 4'\s'
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4 

" == PREFERENCES ==
" Change cursor styles
let &t_SI = "\e[5 q"
let &t_EI = "\e[2 q"

" Remap jk for fast escape, although Ctrl+c is faster?
inoremap jk <Esc>
nnoremap <S-l> :tabn <cr>
nnoremap <S-h> :tabp <cr>
nnoremap <S-d> :tabclose <cr>

" Better window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j 
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k

" Faster copy
nnoremap Y y$

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Bind redo to `r`
nnoremap r :redo<cr>

" Moving text, uses shift key
nnoremap K :m .-2<CR>==
nnoremap J :m .+1<CR>==
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv

" Built-in Terminal, vim 8.1 and above supported
au BufEnter * if &buftype == 'terminal' | :startinsert | endif
nnoremap <silent>tt :term ++rows=10<cr>
tnoremap <silent>tt <c-\><c-n>:q!<cr>

" == PLUG-INS ==
call plug#begin('~/.config/vim/plugged')
  " Enhancements
    Plug 'tpope/vim-commentary'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'preservim/nerdtree'
    Plug 'sbdchd/indentline.vim'
    Plug 'jiangmiao/auto-pairs'
    Plug 'vimwiki/vimwiki'
  " Appearance
    Plug 'itchyny/lightline.vim'
    Plug 'ryanoasis/vim-devicons'
  " Syntax
    Plug 'ap/vim-css-color'
  " LSP
    Plug 'neoclide/coc.nvim', {'branch': 'release'} 
  " Completion
  " Snippets
    Plug 'honza/vim-snippets'
  " Programming (C/C++)
    " Plug 'cdelledonne/vim-cmake'
  " Sveltekit
    " Plug 'othree/html5.vim'
    " Plug 'pangloss/vim-javascript'
    " Plug 'evanleck/vim-svelte', {'branch': 'main'}
call plug#end()

" COC
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

" fzf
" Find root directory and execute :Files
function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
let g:fzf_action = { 'enter': 'tab split' }

command! ProjectFiles execute 'Files' s:find_git_root()

nnoremap <C-p> :ProjectFiles <cr>

" nerdtree
let g:webdevicons_enable_nerdtree = 1
let g:NERDTreeQuitOnOpen=1
nnoremap <C-f> :NERDTreeToggle <cr>

" Always open files in new tabs, remap 'enter' to 'l'
let g:NERDTreeCustomOpenArgs={'file':{'where': 't'}}
let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      'l')

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" lightline.vim
set laststatus=2
let g:lightline = {
      \ 'colorscheme': '16color',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \   'filetype': 'MyFiletype',
      \   'fileformat': 'MyFileformat'
      \ },
      \ }

function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

function! MyFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction

" vimwiki
let g:vimwiki_list = [{'path': '~/Downloads/Notes',
                      \ 'syntax': 'markdown', 'ext': 'md'}]
